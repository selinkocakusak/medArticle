# Generated by Django 3.2.2 on 2021-06-08 14:14

from Bio import Entrez, Medline
import re
from django.db import migrations
import nltk
# nltk.download('punkt')


class Migration(migrations.Migration):

    dependencies = [
        ('medApp', '0004_content'),
    ]

    def insert_default_articles(apps, schema_editor):
        Entrez.api_key = "--"
        Entrez.email = ""
        start = 0
        count = apps.get_model('medApp', 'content').objects.all().count()
        while count < 50000:
            handle = Entrez.esearch(
                db="pubmed", sort="relevance", term="anxiety+disorder+&+depression", retstart=count, retmax=10000, max_tries=10, sleep_between_tries=60)
            record = Entrez.read(handle)
            idNo = (record['IdList'])
            result = Entrez.efetch(db="pubmed", rettype='Medline', max_tries=10, sleep_between_tries=60,
                                   id=idNo)

            data = Medline.parse(result)
            for resultDict in data:
                idKey = "PMID"
                yearKey = "DP"
                abstractKey = "AB"
                autKey = "FAU"
                keywordKey = "OT"
                titleKey = "TI"
                if idKey in resultDict:
                    id = resultDict[idKey]
                if yearKey in resultDict:
                    year = resultDict[yearKey]
                else:
                    year = ""
                if keywordKey in resultDict:
                    keyword = resultDict[keywordKey]
                    keyword = ', '.join([str(elem) for elem in keyword])
                    keyword = re.sub('\*', '', keyword)
                else:
                    keyword = ""
                if abstractKey in resultDict:
                    abstract = resultDict[abstractKey]
                    sent_detector = nltk.data.load(
                        'tokenizers/punkt/english.pickle')
                    abstract = ''.join(
                        sent_detector.tokenize(abstract.strip()))
                else:
                    abstract = ""
                if autKey in resultDict:
                    authors = resultDict[autKey]
                    authors = ' '.join(authors)
                else:
                    authors = ""
                if titleKey in resultDict:
                    title = resultDict[titleKey]
                else:
                    title = ""
                content = apps.get_model('medApp', 'content')
                content = content(doc_id=id, date=year, keywords=keyword,
                                  title=title, authors=authors, abstract=abstract)
                content.save()
            count = apps.get_model('medApp', 'content').objects.all().count()
            start += count

    operations = [
        migrations.RunPython(insert_default_articles),
    ]
